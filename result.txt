@Composable
@OptIn(UnstableApi::class)
fun ScratchWin() {
    var showDialog by remember { mutableStateOf(false) }
    var resetTrigger by remember { mutableStateOf(0) }

    val imageResList = remember {
        getRandomBombDiamondImages(R.drawable.diamond, R.drawable.bomb)
    }

    val revealedList = remember { mutableStateListOf<Boolean>().apply {
        addAll(List(imageResList.size) { false })
    } }

    val scratchPoints = remember { List(imageResList.size) { mutableStateListOf<Offset>() } }


    var diamondCount by remember { mutableStateOf(0) }
    var bombCount by remember { mutableStateOf(0) }


    fun resetGame() {
        resetTrigger++
    }

    // function to update the counts
    fun onDiamondBombCount(imageRes: Int) {
        when (imageRes) {
            R.drawable.diamond -> diamondCount++
            R.drawable.bomb -> bombCount++
        }

        // Log the updated count

    }

    Log.i("Diamond Count: ", diamondCount.toString())
    Log.i("Bomb Count: ", bombCount.toString())

    if (showDialog) {
        CustomCardDialog(
            onDismiss = { showDialog = false },
            fontFamily = FontFamily.SansSerif,
            title = if (diamondCount == 3 && bombCount <= 6) "Panalo" else "Talo",
            description = "Bomb: $bombCount : Diamond: $diamondCount"
        )
    }


    LazyVerticalGrid(
        columns = GridCells.Fixed(3),
        modifier = Modifier
            .fillMaxHeight()
            .border(1.dp, Color.Red),
        horizontalArrangement = Arrangement.Center,
        verticalArrangement = Arrangement.Center,
        userScrollEnabled = false,
        content = {
            items(9) { index ->
                ScracthCardScreen(
                    baseImage = imageResList[index],
                    overlayImage = R.drawable.coin,
                    index = index,
                    revealedList = revealedList,
                    onDiamondBombCount = { imageRes ->
                        if (!revealedList[index]) {
                            revealedList[index] = true
                            onDiamondBombCount(imageRes)
                        }
                    },
                    onRevealChanged = { id, revealed ->
                        if (revealed && revealedList.all { it }) {
                            Log.i("Scratch", "All items revealed!")
//                            showDialog = true
                            Log.i("ID Value", id.toString())
                        }
                    },
                    scratchPoints = scratchPoints[index]
                )
            }
        }
    )
}


@OptIn(UnstableApi::class)
@kotlin.OptIn(ExperimentalComposeUiApi::class)
@Composable
fun ScracthCardScreen(
    baseImage: Int,
    overlayImage: Int,
    index: Int,
    onDiamondBombCount: (Int) -> Unit,
    revealedList: MutableList<Boolean>,
    onRevealChanged: (Int, Boolean) -> Unit,
    scratchPoints: SnapshotStateList<Offset>
) {
    val basedImage = ImageBitmap.imageResource(id = baseImage)
    val overlayImage = ImageBitmap.imageResource(id = overlayImage)

    val currentPathState = remember { mutableStateOf(DraggedPath(path = Path())) }
    val movedOffsetState = remember { mutableStateOf<Offset?>(null) }

    val currentPath = currentPathState.value.path
    val currentPathThickness = currentPathState.value.width

//    Log.i("Diamond Bomb: ", onDiamondBombCount(baseImage).toString())
    onDiamondBombCount(baseImage)
    Canvas(
        modifier = Modifier
            .fillMaxWidth()
            .height(100.dp)
            .clipToBounds()
            .padding(5.dp)
            .clip(RoundedCornerShape(16.dp))
            .border(1.dp, Color.LightGray, RoundedCornerShape(16.dp))
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN -> {
                        currentPath.moveTo(it.x, it.y)
                        scratchPoints.clear()
                        scratchPoints.add(Offset(it.x, it.y))
                    }
                    MotionEvent.ACTION_MOVE -> {
                        movedOffsetState.value = Offset(it.x, it.y)
                        scratchPoints.add(Offset(it.x, it.y))
                    }
                }
                true
            },
    ) {

        val canvasWidth = size.width.toInt()
        val canvasHeight = size.height.toInt()
        val imageSize = IntSize(canvasWidth, canvasHeight)

        drawImage(
            image = overlayImage,
            dstSize = imageSize
        )

        movedOffsetState.value?.let {
            currentPath.addOval(oval = Rect(it, currentPathThickness))
        }

        clipPath(
            path = currentPath,
            clipOp = ClipOp.Intersect
        ) {
            drawImage(
                image = basedImage,
                dstSize = imageSize
            )
        }

        // Check if the card is revealed, and update counts
        if (isCardRevealed(scratchPoints)) {
            if (!revealedList[index]) {
                revealedList[index] = true
                onRevealChanged(index, true)
            }
        }
    }
}
