ElevatedButton(
  onPressed: () {
    if (_formKey.currentState!.validate()) {
      final price_ = _priceController.text;
      var finalPrice;

      final quantity_ = _quantityController.text;
      var finalQuan;

      try {
        finalPrice = double.parse(price_);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Price Error: " + e.toString()),
          ),
        );
      }

      try {
        finalQuan = int.parse(quantity_);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Quantity Error: " + e.toString()),
          ),
        );
      }

      // categoryId based on selectedValue
      int categoryId = int.parse(selectedValue!);

      List<Product> categoryList;
      switch (categoryId) {
        case 1:
          categoryList = ProductList.tShirtList;
          break;
        case 2:
          categoryList = ProductList.poloShirtList;
          break;
        case 3:
          categoryList = ProductList.casualWear;
          break;
        default:
          throw Exception('Invalid categoryId');
      }

      // If editing an existing product, update it
      if (isEditingMode && selectedProduct != null) {
        selectedProduct!.name = _productNameController.text;
        selectedProduct!.categoryId = categoryId;
        selectedProduct!.description = _descriptionController.text;
        selectedProduct!.price = finalPrice;
        selectedProduct!.totalQuantity = finalQuan;

        // You can also update the image if needed, depending on the logic you want
        // selectedProduct!.image = getRandomImageFromCategory(categoryId);
      } else {
        // If not in editing mode, create a new product
        String getRandomImageFromCategory(int categoryId) {
          final random = Random();
          List<String>? categoryAssets;

          switch (categoryId) {
            case 1:
              categoryAssets = ProductAssets.tShirtAssets;
              break;
            case 2:
              categoryAssets = ProductAssets.poloShirtAssets;
              break;
            case 3:
              categoryAssets = ProductAssets.casualAssets;
              break;
            default:
              throw Exception('Invalid category ID');
          }

          // Randomly pick an image from the category
          return categoryAssets[random.nextInt(categoryAssets.length)];
        }

        // Choose a random image from category assets
        String randomImage = getRandomImageFromCategory(categoryId);

        int index = allProducts.length;
        Product newProduct = Product(
          id: index + 1,  // you might want to adjust the ID logic here to ensure it's unique
          name: _productNameController.text,
          categoryId: categoryId,
          image: randomImage,
          description: _descriptionController.text,
          price: finalPrice,
          quantity: 1,
          totalQuantity: finalQuan,
        );

        categoryList.add(newProduct);
      }

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(isEditingMode ? "Product updated successfully!" : "Product added successfully!"),
        ),
      );

      // Clear the forms
      _productNameController.clear();
      _descriptionController.clear();
      _quantityController.clear();
      _priceController.clear();
      setState(() {
        selectedValue = null;
        isEditingMode = false;  // Reset to non-editing mode after action
      });
    } else {
      // errors
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Please fill out all fields"),
        ),
      );
    }
  },
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.blue,
    elevation: 2.0,
    shadowColor: Colors.black,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(4),
    ),
  ),
  child: Text(
    isEditingMode ? 'Update Product' : 'Add Product',
    style: const TextStyle(
      fontSize: 18,
      fontWeight: FontWeight.bold,
      color: Colors.white,
    ),
  ),
)
