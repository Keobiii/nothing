@Composable
fun ScracthCardScreen(
    baseImage: Int,
    overlayImage: Int,
    index: Int,
    revealedList: MutableList<Boolean>,
    onRevealChanged: (Int, Boolean) -> Unit,
    scratchPoints: SnapshotStateList<Offset>
) {
    val baseImage = ImageBitmap.imageResource(id = baseImage)
    val overlayImage = ImageBitmap.imageResource(id = overlayImage)

    val currentPathState = remember { mutableStateOf(DraggedPath(path = Path())) }
    val movedOffsetState = remember { mutableStateOf<Offset?>(null) }

    val currentPath = currentPathState.value.path
    val currentPathThickness = currentPathState.value.width

    val onMovedoffset = { x, y ->
        movedOffsetState.value = Offset(x, y)
    }

//    ScratchCard(
//        overlayImage = overlayImage,
//        baseImage = baseImage,
//        movedOffset = movedOffsetState.value,
//        onMovedoffset = { x, y ->
//            movedOffsetState.value = Offset(x, y)
//        },
//        currentPath = currentPathState.value.path,
//        currentPathThickness = currentPathState.value.width,
//        index = index,
//        revealedList = revealedList,
//        onRevealChanged = onRevealChanged,
//        scratchPoints = scratchPoints
//    )


    Canvas(
        modifier = Modifier
            .fillMaxWidth()
            .height(100.dp)
            .clipToBounds()
            .padding(5.dp)
            .clip(RoundedCornerShape(16.dp))
            .border(1.dp, Color.LightGray, RoundedCornerShape(16.dp))
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN -> {
                        currentPath.moveTo(it.x, it.y)
                        scratchPoints.clear() // Start fresh on a new touch
                        scratchPoints.add(Offset(it.x, it.y))
                    }
                    MotionEvent.ACTION_MOVE -> {
                        onMovedoffset(it.x, it.y)
                        scratchPoints.add(Offset(it.x, it.y)) // Add the new point to the list
                    }
                }
                true
            },
    ) {

        val canvasWidth = size.width.toInt()
        val canvasHeight = size.height.toInt()
        val imageSize = IntSize(canvasWidth, canvasHeight)

        drawImage(
            image = overlayImage,
            dstSize = imageSize
        )

        onMovedoffset?.let {
            currentPath.addOval(oval = Rect(it, currentPathThickness))
        }

        clipPath(
            path = currentPath,
            clipOp = ClipOp.Intersect
        ) {
            drawImage(
                image = baseImage,
                dstSize = imageSize
            )
        }


        if (isCardRevealed(scratchPoints)) {
            if (!revealedList[index]) {
                revealedList[index] = true
                onRevealChanged(index, true)
            }
        }
    }
}
