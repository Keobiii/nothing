onPressed: () {
  if (_formKey.currentState!.validate()) {
    final price_ = _editPriceController.text;
    var finalPrice;

    final quantity_ = _editQuantityController.text;
    var finalQuan;

    try {
      finalPrice = double.parse(price_);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Price Error: " + e.toString()),
        ),
      );
      return;
    }

    try {
      finalQuan = int.parse(quantity_);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Quantity Error: " + e.toString()),
        ),
      );
      return;
    }

    if (selectedValue == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Please select a category"),
        ),
      );
      return;
    }

    int categoryId = int.parse(selectedValue!);

    List<Product> categoryList;
    switch (categoryId) {
      case 1:
        categoryList = ProductList.tShirtList;
        break;
      case 2:
        categoryList = ProductList.poloShirtList;
        break;
      case 3:
        categoryList = ProductList.casualWear;
        break;
      default:
        throw Exception('Invalid categoryId');
    }

    final product = Product(
      id: widget.productId,
      name: _editProductNameController.text,
      categoryId: categoryId,
      image: 'assets/images/casual/img2.png',
      description: _editDescriptionController.text,
      price: finalPrice,
      quantity: 1,
      totalQuantity: finalQuan,
    );

    context.read<ProductBloc>().add(
      ProductUpdateRequest(updatedProduct: product),
    );

    // Clear inputs
    _editProductIDController.clear();
    _editProductNameController.clear();
    _editQuantityController.clear();
    _editDescriptionController.clear();
    _editPriceController.clear();
    setState(() {
      selectedValue = null;
    });

    Navigator.of(context).pop();
  }
}
