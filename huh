@HiveType(typeId: 0)
class User {
  @HiveField(0)
  int userId;

  @HiveField(1)
  int userRole;

  @HiveField(2)
  String username;

  @HiveField(3)
  String email;

  @HiveField(4)
  double balance;

  @HiveField(5)
  String phoneNumber;

  @HiveField(6)
  String passwordHash;

  @HiveField(7)
  DateTime createdAt;

  User({
    required this.userId,
    required this.userRole,
    required this.username,
    required this.email,
    this.balance = 0,
    required this.phoneNumber,
    required String password,
    required this.createdAt,
  }) : passwordHash = _hash(password);

  User.fromHive({
    required this.userId,
    required this.userRole,
    required this.username,
    required this.email,
    this.balance = 0,
    required this.phoneNumber,
    required this.passwordHash,
    required this.createdAt,
  });

  UserRole get role => UserRole.fromLevel(userRole);
  set role(UserRole role) => userRole = role.level;

  static String _hash(String password) =>
      sha256.convert(utf8.encode(password)).toString();

  bool validatePassword(String input) {
    return passwordHash == _hash(input);
  }

  // Updated copyWith, exclude password and passwordHash
  User copyWith({
    int? userId,
    int? userRole,
    String? username,
    String? email,
    double? balance,
    String? phoneNumber,
    DateTime? createdAt,
  }) {
    return User(
      userId: userId ?? this.userId,
      userRole: userRole ?? this.userRole,
      username: username ?? this.username,
      email: email ?? this.email,
      balance: balance ?? this.balance,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      passwordHash: this.passwordHash,  // Keep the current passwordHash
      createdAt: createdAt ?? this.createdAt,
    );
  }

  // Function to update password separately
  User updatePassword(String newPassword) {
    return copyWith(passwordHash: _hash(newPassword));
  }
}
