import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:wifi/utils/ConnectionStatus.dart';

class ConnectionCubit extends Cubit<Connectionstatus> {
  final Connectivity _connection = Connectivity();

  ConnectionCubit() : super(Connectionstatus.loading);

  void monitorConnection() {
    _connection.onConnectivityChanged.listen((
      List<ConnectivityResult> results,
    ) {
      if (results.contains(ConnectivityResult.wifi)) {
        emit(Connectionstatus.connectedToWifi);
      } else if (results.contains(ConnectivityResult.mobile)) {
        emit(Connectionstatus.connectedToMobile);
      } else {
        emit(Connectionstatus.noInternetConnection);
      }
    });
  }
}


void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: BlocProvider(create: (_) => ConnectionCubit(), child: HomePage()),
    );
  }
}


class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocBuilder<ConnectionCubit, Connectionstatus>(
        builder: (context, state) {
          if (state == Connectionstatus.loading) {
            return Center(child: CircularProgressIndicator());
          } else if (state == Connectionstatus.connectedToWifi) {
            return Center(child: Text('Connected to WiFi'));
          } else if (state == Connectionstatus.connectedToMobile) {
            return Center(child: Text('Connected to Mobile Data'));
          } else if (state == Connectionstatus.noInternetConnection) {
            return Center(child: Text('No Internet Connection'));
          }
          return SizedBox();
        },
      ),
    );
  }
}

enum Connectionstatus {
  loading,
  connectedToWifi,
  connectedToMobile,
  noInternetConnection,
}
