                  // Product Grid
                  isSelected == 0
                      ? ProductGrid(products: ProductList.allProducts)
                      : isSelected == 1
                      ? ProductGrid(products: ProductList.tShirtList)
                      : isSelected == 2
                      ? ProductGrid(products: ProductList.poloShirtList)
                      : ProductGrid(products: ProductList.casualWear),


import 'package:shopping/data/models/Product.dart';

class ProductList {
  static List<Product> tShirtList = [
    // T-shirt
    // Product(
    //   id: 1,
    //   name: 'T-Shirt 1',
    //   categoryId: 1,
    //   image: 'assets/images/t-shirt/img1.png',
    //   description: 'Lorem Ipsum',
    //   price: 100.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 2,
    //   name: 'T-Shirt 2',
    //   categoryId: 1,
    //   image: 'assets/images/t-shirt/img2.png',
    //   description: 'Lorem Ipsum',
    //   price: 200.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 3,
    //   name: 'T-Shirt 3',
    //   categoryId: 1,
    //   image: 'assets/images/t-shirt/img3.png',
    //   description: 'Lorem Ipsum',
    //   price: 220.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
  ];

  static List<Product> poloShirtList = [
    // Polo-Shirt
    // Product(
    //   id: 4,
    //   name: 'Polo-Shirt 10',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img1.png',
    //   description: 'Lorem Ipsum u g',
    //   price: 100.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 5,
    //   name: 'Polo-Shirt 2',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img2.png',
    //   description: 'Lorem Ipsum',
    //   price: 200.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 6,
    //   name: 'Polo-Shirt 3',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img3.png',
    //   description: 'Lorem Ipsum',
    //   price: 220.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 7,
    //   name: 'Polo-Shirt 4',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img4.png',
    //   description: 'Lorem Ipsum',
    //   price: 240.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 8,
    //   name: 'Polo-Shirt 5',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img5.png',
    //   description: 'Lorem Ipsum',
    //   price: 240.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 9,
    //   name: 'Polo-Shirt 6',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img6.png',
    //   description: 'Lorem Ipsum',
    //   price: 240.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 10,
    //   name: 'Polo-Shirt 7',
    //   categoryId: 2,
    //   image: 'assets/images/polo-shirt/img7.png',
    //   description: 'Lorem Ipsum',
    //   price: 240.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
  ];

  static List<Product> casualWear = [
    // Product(
    //   id: 11,
    //   name: "Casual 1",
    //   categoryId: 3,
    //   image: 'assets/images/casual/img1.png',
    //   description: 'Lorem Ipsum',
    //   price: 160.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 12,
    //   name: "Casual 2",
    //   categoryId: 3,
    //   image: 'assets/images/casual/img2.png',
    //   description: 'Lorem Ipsum',
    //   price: 160.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
    // Product(
    //   id: 13,
    //   name: "Casual 3",
    //   categoryId: 3,
    //   image: 'assets/images/casual/img3.png',
    //   description: 'Lorem Ipsum',
    //   price: 160.00,
    //   quantity: 1,
    //   totalQuantity: 10,
    // ),
  ];

  // Combine T-Shirt and Polo-Shirt Lists
  static List<Product> allProducts = [
    ...tShirtList,
    ...poloShirtList,
    ...casualWear,
  ];
}


class Product {
  // properties of each product
  int id;
  String name;
  int categoryId;
  String image;
  String description;
  double price;
  int quantity;
  int totalQuantity;

  // constructor
  // to ensure that each product have this properties
  Product({
    required this.id,
    required this.name,
    required this.categoryId,
    required this.image,
    required this.description,
    required this.price,
    required this.quantity,
    required this.totalQuantity,
  });
}



  Form _getProductData() {
    return Form(
      child: Column(
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "Select a Product:",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),
              DropdownButtonFormField<Product>(
                decoration: InputDecoration(border: OutlineInputBorder()),
                hint: Text("Choose a product"),
                value: selectedProduct,
                onChanged: (Product? newValue) {
                  setState(() {
                    isEditingMode = true;
                    selectedProduct = newValue;
                    _productIDController.text = newValue?.id.toString() ?? '';
                    _productNameController.text = newValue?.name ?? '';
                    _descriptionController.text = newValue?.description ?? '';
                    _priceController.text = newValue?.price.toString() ?? '';
                    _quantityController.text =
                        newValue?.totalQuantity.toString() ?? '';

                    selectedValue = newValue?.categoryId.toString() ?? '';
                  });
                },
                items:
                    allProducts.map((product) {
                      return DropdownMenuItem<Product>(
                        value: product,
                        child: Text(product.name),
                      );
                    }).toList(),
              ),
              SizedBox(height: 20),
              // Show selected product details
              // if (selectedProduct != null) ...[
              //   Text(
              //     "Product Details:",
              //     style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              //   ),
              //   SizedBox(height: 10),
              //   Text("ID: ${selectedProduct!.id}"),
              //   Text("Name: ${selectedProduct!.name}"),
              //   Text(
              //     "Category: ${_getCategoryName(selectedProduct!.categoryId)}",
              //   ),
              //   Text("Description: ${selectedProduct!.description}"),
              //   Text("Price: ${selectedProduct!.price}"),
              //   Text("Quantity: ${selectedProduct!.quantity}"),
              //   Text("Image: ${selectedProduct!.image}"),
              // ],
            ],
          ),
        ],
      ),
    );
  }


  List<DropdownMenuItem<String>> get dropdownItems {
    // getting categories list except for the id = 0
    List<Map<String, dynamic>> filteredCategories =
        categories.where((item) => item['id'] != 0).toList();

    // Dropdown menu
    List<DropdownMenuItem<String>> menuItems =
        filteredCategories.map((item) {
          return DropdownMenuItem(
            child: Text(item['name'].toString()),
            value: item['id'].toString(),
          );
        }).toList();

    return menuItems;
  }
