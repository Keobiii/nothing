
final GoRouter router = GoRouter(
  initialLocation: '/',
  redirect: (context, state) async {
    final sharedPreferences = await SharedPreferences.getInstance();
    final userId = sharedPreferences.getInt('loggedUserId');

    if (userId == null && state.matchedLocation != '/login') {
      return '/login';
    }

    if (userId != null && state.matchedLocation == '/login') {
      return '/';
    }

    return null;
  },
  routes: [
    GoRoute(
      path: '/login',
      pageBuilder: (context, state) => fadeTransition(const Login(), state),
    ),

    ShellRoute(
      builder: (context, state, child) {
        final authState = context.watch<AuthBloc>().state;
        final userId = authState is AuthSucess ? authState.user.userId : 0;

        return UserMainScreen(child: child, userId: userId);
      },
      routes: [
        GoRoute(
          path: '/',
          pageBuilder:
              (context, state) => fadeTransition(const GameHomePage(), state),
        ),
        GoRoute(
          path: '/user_page/:userId',
          pageBuilder: (context, state) {
            final userId =
                int.tryParse(state.pathParameters['userId'] ?? '') ?? 0;
            return fadeTransition(UserPage(userId: userId), state);
          },
        ),
        GoRoute(
          path: '/profile/:userId',
          pageBuilder: (context, state) {
            final userId =
                int.tryParse(state.pathParameters['userId'] ?? '') ?? 0;
            return fadeTransition(UserProfile(userId: userId), state);
          },
        ),
        GoRoute(
          path: '/update_password/:userId',
          pageBuilder: (context, state) {
            final userId =
                int.tryParse(state.pathParameters['userId'] ?? '') ?? 0;
            return fadeTransition(UserUpdatePassword(userId: userId), state);
          },
        ),
        GoRoute(
          path: '/game',
          pageBuilder:
              (context, state) => fadeTransition(const GamePage(), state),
        ),
        GoRoute(
          path: '/shop',
          pageBuilder: (context, state) {
            return fadeTransition(const ShopPage(), state);
          },
        ),
      ],
    ),
  ],
);

CustomTransitionPage fadeTransition(Widget child, GoRouterState state) {
  return CustomTransitionPage(
    key: state.pageKey,
    child: child,
    transitionsBuilder: (context, animation, secondaryAnimation, child) {
      return FadeTransition(opacity: animation, child: child);
    },
  );
}



class UserMainScreen extends StatelessWidget {
  final Widget child;
  final int userId;
  const UserMainScreen({super.key, required this.child, required this.userId});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<NavigationBloc, NavigationState>(
      builder: (context, state) {
        return Scaffold(appBar: CustomAppBar(userId: userId), body: child);
      },
    );
  }
}


class CustomAppBar extends StatelessWidget implements PreferredSizeWidget {
  final double height;
  final int userId;

  const CustomAppBar({Key? key, this.height = 80, required this.userId})
    : super(key: key);

  @override
  Size get preferredSize => Size.fromHeight(height);

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<UserBloc, UserState>(
      builder: (context, state) {
        if (state is UserInitial || state is UserUpdated) {
          context.read<UserBloc>().add(LoadUserById(userId));
        }

        String chipsBalance = "---";
        if (state is UserLoaded) {
          chipsBalance = "${state.user.chips}";
        }
        return Container(
          height: height,
          decoration: BoxDecoration(
            color: Color(0xFF21273e),
            boxShadow: [
              BoxShadow(
                color: Colors.black54,
                blurRadius: 3,
                spreadRadius: 2,
                offset: Offset(2, 2),
              ),
            ],
          ),

          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              GestureDetector(
                onTap: () {
                  context.go('/');
                },
                child: Container(
                  child: Image.asset(
                    'assets/images/logo.png',
                    fit: BoxFit.fill,
                    height: 45,
                    width: 90,
                  ),
                ),
              ),
              Container(
                width: 170,
                height: 40,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Container(
                      width: 120,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.grey,
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          GestureDetector(
                            onTap: () {
                              context.go('/shop');
                            },
                            child: SizedBox(
                              height: 40,
                              width: 40,
                              child: Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Image.asset(
                                  'assets/images/elements/currency.png',
                                  fit: BoxFit.contain,
                                ),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Countup(
                              begin: 100,
                              end:
                                  (chipsBalance != "---")
                                      ? double.tryParse(chipsBalance) ?? 0.0
                                      : 0.0,
                              duration: Duration(seconds: 3),
                              style: TextStyle(
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    Spacer(),
                    GestureDetector(
                      onTap: () {
                        // Navigate to profile using GoRouter
                        context.go('/user_page/$userId');
                      },
                      child: CircleAvatar(
                        backgroundColor: Colors.blue,
                        radius: 20,
                        child: ClipOval(
                          child: Image.asset(
                            'assets/images/user/nobita.png',
                            fit: BoxFit.cover,
                            height: 45,
                            width: 45,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
