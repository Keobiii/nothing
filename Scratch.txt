                var imageResList by remember { mutableStateOf(getCustomRandomImages(R.drawable.diamond, R.drawable.bomb, diamondCount, bombCount)) }
                val revealedList = remember { mutableStateListOf<Boolean>().apply {
                    addAll(List(imageResList.size) { false })
                } }

                // Keep track of the scratch points for each card
                val scratchPoints = remember { mutableStateListOf<Offset>() }

                val totalCount = diamondCount + bombCount
                Log.i("Bomb Count: ", bombCount.toString())
                Log.i("Diamond Count: ", diamondCount.toString())
                Log.i("Total Count: ", totalCount.toString())

LazyVerticalGrid(
                                    columns = GridCells.Fixed(3),
                                    modifier = Modifier
                                        .fillMaxHeight()
                                        .border(1.dp, Color.Red),
                                    horizontalArrangement = Arrangement.Center,
                                    verticalArrangement = Arrangement.Center,
                                    userScrollEnabled = false,
                                    content = {
                                        items(9) { index ->
                                            ScracthCardScreen(
                                                baseImage = imageResList[index],
                                                overlayImage = R.drawable.coin,
                                                index = index,
                                                revealedList = revealedList,
                                                onRevealChanged = { idx, revealed ->
                                                    // When a card is revealed, check if all cards are revealed
                                                    if (revealed && revealedList.all { it }) {
                                                        // All cards revealed, do something (e.g., show a message or trigger an action)
                                                        Log.i("Scratch", "All items revealed!")
                                                    }
                                                },
                                                scratchPoints = scratchPoints
                                            )
                                        }
                                    }
                                )


fun getCustomRandomImages(image1: Int, image2: Int, count1: Int, count2: Int): List<Int> {
    // Creating a new list
    val imageList = mutableListOf<Int>()

    // Store the specific count of images in the list
    repeat(count1) { imageList.add(image1) }
    repeat(count2) { imageList.add(image2) }

    // Shuffle to randomize the order
    return imageList.shuffled()
}

@Composable
fun ScracthCardScreen(
    baseImage: Int,
    overlayImage: Int,
    index: Int, // Add index to track each card
    revealedList: MutableList<Boolean>, // Add revealedList to track revealed state
    onRevealChanged: (Int, Boolean) -> Unit, // Add callback to notify when revealed state changes
    scratchPoints: SnapshotStateList<Offset>
) {
    val baseImage = ImageBitmap.imageResource(id = baseImage)
    val overlayImage = ImageBitmap.imageResource(id = overlayImage)


    val currentPathState = remember { mutableStateOf(DraggedPath(path = Path())) }
    val movedOffsetState = remember { mutableStateOf<Offset?>(null) }

    // Handle ScratchCard composable
    ScratchCard(
        overlayImage = overlayImage,
        baseImage = baseImage,
        movedOffset = movedOffsetState.value,
        onMovedoffset = { x, y ->
            movedOffsetState.value = Offset(x, y)
        },
        currentPath = currentPathState.value.path,
        currentPathThickness = currentPathState.value.width,
        index = index,
        revealedList = revealedList,
        onRevealChanged = onRevealChanged,
        scratchPoints = scratchPoints // Pass the scratchPoints list here
    )
}









@OptIn(ExperimentalComposeUiApi::class)
@Composable
fun ScratchCard(
    overlayImage: ImageBitmap,
    baseImage: ImageBitmap,
    modifier: Modifier = Modifier,
    movedOffset: Offset?,
    onMovedoffset: (Float, Float) -> Unit,
    currentPath: Path,
    currentPathThickness: Float,
    index: Int, // Add the index for the card
    revealedList: MutableList<Boolean>, // Add the revealedList as a parameter
    onRevealChanged: (Int, Boolean) -> Unit, // Add a callback to notify when revealed state changes
    scratchPoints: MutableList<Offset> // Track points
) {

    Canvas(
        modifier = modifier
            .fillMaxWidth()
            .height(100.dp)
            .clipToBounds()
            .padding(5.dp)
            .clip(RoundedCornerShape(16.dp))
            .border(1.dp, Color.LightGray, RoundedCornerShape(16.dp))
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN -> {
                        currentPath.moveTo(it.x, it.y)
                        scratchPoints.clear() // Start fresh on a new touch
                        scratchPoints.add(Offset(it.x, it.y))
                    }
                    MotionEvent.ACTION_MOVE -> {
                        onMovedoffset(it.x, it.y)
                        scratchPoints.add(Offset(it.x, it.y)) // Add the new point to the list
                    }
                }
                true
            },
    ) {

        val canvasWidth = size.width.toInt()
        val canvasHeight = size.height.toInt()
        val imageSize = IntSize(canvasWidth, canvasHeight)

        drawImage(
            image = overlayImage,
            dstSize = imageSize
        )

        movedOffset?.let {
            currentPath.addOval(oval = Rect(it, currentPathThickness))
        }

        clipPath(
            path = currentPath,
            clipOp = ClipOp.Intersect
        ) {
            drawImage(
                image = baseImage,
                dstSize = imageSize
            )
        }

        // Check if the card is sufficiently revealed
        if (isCardRevealed(scratchPoints)) {
            if (!revealedList[index]) {
                revealedList[index] = true
                onRevealChanged(index, true) // Notify that the card has been revealed
            }
        }
    }
}

// Function to determine if the card has been revealed based on the number of points scratched
fun isCardRevealed(scratchPoints: MutableList<Offset>): Boolean {
    // Set a threshold number of points to consider a card revealed
    val threshold = 100 // The number of points needed to reveal the card

    return scratchPoints.size >= threshold
}
